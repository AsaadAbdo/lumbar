#!/usr/bin/env node

var fs = require('fs'),
    lumbar = require('../lib/lumbar');

var argv = require('optimist').argv;

var lumbarFile,
    options = {
      packageConfigFile: argv.config,
      minimize: argv.minimize,
      outdir: null
    },
    pkg = argv['package'], 
    watch = false,
    build = false;

var LONG_USAGE="lumbar help\n"+
"        Print this long help message.\n"+
"lumbar build [--package name] [--config file] [--minimize] lumbarFile outputDir\n"+
"        Build out the package(s).\n"+
"lumbar watch [--package]\n"+
"        Start watching the files for changes and rebuild as necessary.\n"+
"\n"+
"package:      represents the name of a corresponding package listed\n"+
"              under 'packages' in lumbarFile.\n"+
"\n"+
"minimize:     to shrink the resultant file.\n"+
"\n"+
"lumbarFile:   is the name and path to the lumbar config file, if\n"+
"              not given then lumbar.json is assumed.\n"+
"\n"+
"outputDir:    Required. Designates where the files will be placed.\n"+
"\n"+
"Please use 'man lumbar' to get the full man page.";

var argl = argv._.length;
var cmd;

if (argl) {
  cmd = argv._[0];
}

var what_step = {
  "help":function() {
    return true; // this will print the help message
  },
  "build":function(){
    build = true;

    if (argl === 1) {
      // outputDir is required
      return true;
    }

    if (argl === 2) {
      // lumbarFile is missing, re-assign
      options.outdir = argv._[1];
      lumbarFile = "lumbar.json";
    }

    if (argl === 3) {
      lumbarFile = argv._[1];
      options.outdir = argv._[2];
    }

    if (!lumbarFile || !options.outdir) {
      return true;
    }
  },
  "watch":function(){
    watch = true;
  }
};

var fn = what_step[cmd] || what_step.help;
if (fn.apply(this)) {
  console.log(LONG_USAGE);
  return;
}

// invoke init() from ../lib/lumbar.js. 
var arise = lumbar.init(lumbarFile, options),
    // is worker going to point to watch or build func?
    worker = watch ? arise.watch : arise.build;

// First figure out what our output looks like
fs.stat(options.outdir, function(err, stat) {
    if (err) {
        throw err;
    }

    if (!stat.isDirectory()) {
        throw new Error("Output must be a directory");
    }

    // execute either watch() or build() and pass lumbar as the context.
    worker.call(arise, pkg, function(err, status) {
        if (err) {
            throw err;
        }

        if (status.watch) {
            console.log('\t\033[90mwatching\033[0m ' + status.fileName);
        } else {
            console.log('\t\033[90mcompiled\033[0m ' + status.fileName);
        }
    });
});
